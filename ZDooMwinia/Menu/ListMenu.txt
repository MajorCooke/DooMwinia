Class ListMenuScroller : ListMenu
{
	enum timing
	{
		moveFraction = 8,
		maxTime = 6,
	};

	Array<Double> px, py;
	bool saved;
	bool startMoving;
	double widest;
	double directionNS, directionEW;
	int tParam, ticTimer;
	Name tAction;
	Vector2 mAmount;
	
	override void Init(Menu parent = NULL, ListMenuDescriptor desc = NULL)
	{
		Super.Init(parent, desc);
		startMoving = false;
		widest = 0;
		MoveMenu(0);
		
	}
	
	//==========================================================================
	// Use this if things go sideways. It will reset everything to the very
	// defaults and reset all timers.
	void ResetMenuPos()
	{
		ticTimer = 0;
		startMoving = false;
		
		if (px.Size() > 0)
		{
			for (int i = 0; i < px.Size(); i++)
			{
				mDesc.mItems[i].SetX(px[i]);
			}
		}
		
		if (py.Size() > 0)
		{
			for (int i = 0; i < px.Size(); i++)
			{
				mDesc.mItems[i].OffsetPositionY (-mDesc.mItems[i].GetY());
				mDesc.mItems[i].OffsetPositionY (py[i]);
			}
		}
		
	}
	//==========================================================================
	// Moves the menu. POSITIVE X values move it to the right, negative left.
	// Positive Y goes down, negative up. Use absolute to set the position
	// directly instead of by offsetting. This will move EVERY MENU OBJECT.
	// Each menu object is part of the mDesc.mItems array.
	void MoveMenu(double ofx, double ofy = 0.0, bool absolute = false)
	{	
		// Allocate if unallocated.
		if (px.Size() <= 0)
		{
			px.Reserve(mDesc.mItems.Size());
			py.Reserve(mDesc.mItems.Size());
		}
		
		// Save it first if it's not saved.
		for (int i=0; i < mDesc.mItems.Size(); i++)
		{
			if (!saved)
			{
				px[i] = mDesc.mItems[i].GetX();
				py[i] = mDesc.mItems[i].GetY();
			}
			
			double currentx = absolute ? 0 : mDesc.mItems[i].GetX();
			double currenty = absolute ? -mDesc.mItems[i].GetY() : 0;
			
			// X is set directly, so change it into an offset to match
			// OffsetPositionY's functionality.
			
			mDesc.mItems[i].SetX(currentx + ofx);
			mDesc.mItems[i].OffsetPositionY(ofy + currenty);
		}
		saved = true;
	}
	
	//==========================================================================
	// Sets up the menu change for after the movement and signals for the menu
	// to start moving. See ListMenuItemTextItemPulse for how to call this
	// function.
	void TriggerMovement(Name p1, int p2, double dir = 0.0)
	{
		if (startMoving || ticTimer > 0)
			return;
	
		tAction = p1;
		tParam = p2;
		
		if (dir < 0.0)	
		{
			SetMenu(tAction, tParam);
			return;
		}
		
		directionNS = -sin(dir) * (Screen.GetHeight() / (moveFraction * 2));
		directionEW = cos(dir) * (((widest + Screen.GetWidth()) / 2) / moveFraction);
		
		if (!widest)
		{
			for (int i=0; i < mDesc.mItems.Size(); i++)
			{
				widest = max(widest, mDesc.mItems[i].GetWidth());
			}
		}
		ticTimer = 0;
		startMoving = true;
	}
	
	//==========================================================================
	// The Ticker function is much like an actor's Tick() function... okay,
	// it actually is EXACTLY that for menus. Want things to happen over time?
	// It goes here.
	
	// In this example, the menu moves to the right when beginning to change
	// and then opens the selected menu.
	// When you come back to it, it moves back to the starting position.
	
	override void Ticker()
	{
		if (startMoving)
		{
			if (ticTimer < maxTime)
			{
				MoveMenu (directionEW, directionNS);
				ticTimer++;
			}
			else
			{
				//You can use ResetMenuPos() if you don't want to wait for it to come back.
				startMoving = false;
				//ResetMenuPos();
				SetMenu(tAction, tParam);
			}
			return Super.Ticker();
		}
		
		else if (ticTimer > 0)
		{
			MoveMenu (-directionEW, -directionNS);
			ticTimer--;
		}
		
		Super.Ticker();
	}
	
	//==========================================================================
	// Pressing escape without this would outright quit the menu. Make it go
	// back instead for consistency.
	override bool MenuEvent (int mkey, bool fromcontroller)
	{
		switch (mkey)
		{
		case MKEY_Back:
		
			if (startMoving)	startMoving = false;
			else				Close();
			MenuSound (GetCurrentMenu() != null ? "menu/backup" : "menu/clear");
			return true;
		}
		return Super.MenuEvent(mkey, fromcontroller);
	}
	
	//==========================================================================
	// Ensure everything's reset.
	override void OnDestroy()
	{
		ticTimer = 0;
		startMoving = false;
		ResetMenuPos();
		Super.OnDestroy();
	}
}