/*
Darwinian/LaserHitDarwinian
Weapons/
	Airstrike/
		Alarm
		Explode
		Drop
		Hover
	Grenade/
		Bounce
		Beep
		Explode
		Fire
		Ready
	Laser/
		Building
		Ent
		Grid
		Fire
	Rocket/
		Explode
		Fire
		Loop
	Hypnotize
	MeteorHitClose
	MeteorHitFar
	NukeDetonateFar
	NukeDetonateNear
*/

Class DarwinianRocket : Actor
{
	bool delay;
	Default
	{
		Projectile;
		+FORCERADIUSDMG
		+SKYEXPLODE
		+BRIGHT
		+DOHARMSPECIES
		ReactionTime 60;
		Speed 12;
		Damage 20;
		Height 4;
	}
	
	override void BeginPlay()
	{
		ChangeStatNum(STAT_EXPLOSIVE);
		Super.BeginPlay();
	}
	
	override void PostBeginPlay()
	{
		if (target)	DesignatedTeam = target.DesignatedTeam;
		A_PlaySound("Weapons/Rocket/Fire",5);
		A_PlaySound("Weapons/Rocket/Loop",6,1,1);
		Super.PostBeginPlay();
	}
	
	override int SpecialMissileHit (Actor victim)
	{
		if (!victim || victim.DesignatedTeam == DesignatedTeam)	
			return 1;
		if (victim.health > 1)
			return -1;
		
		return 1;
	}
	
	States
	{
	Spawn:
		MISL A 1
		{
			
			A_CountDown();
			if (delay && target && target.player)
			{
				int input = target.GetPlayerInput(MODINPUT_BUTTONS);
				if (input & BT_ALTATTACK && !(target.GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_ALTATTACK))
				{
					ExplodeMissile(null, null);
				}
			}
			
			delay = true;
		}
		Wait;
	Death:
		TNT1 A 35
		{
			ChangeTID(0);
			A_Stop();
			bNOINTERACTION = true;
			A_Explode(110,170,1,0,64);
			A_SpawnItemEx("DarwiniaExplosion",flags: SXF_NOCHECKPOSITION);
			A_PlaySound("Weapons/Rocket/Explode",6);
		}
		Stop;
	}
	
}
Class DarwinianGrenade : Actor
{
	Actor Flare;
	int ticker, timer;
	int waiter;
	double sw;
	Default
	{
		Projectile;
		+FORCERADIUSDMG
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+BOUNCEONCEILINGS
		//+BOUNCEAUTOOFFFLOORONLY
		+ALLOWBOUNCEONACTORS
		+BOUNCEONACTORS
		//+USEBOUNCESTATE
		+NOEXPLODEFLOOR
		+BRIGHT
		-NOGRAVITY
		+DOHARMSPECIES
		
		BounceSound "Weapons/Grenade/Bounce";
		Speed 10;
		ReactionTime 105;
		Gravity 0.6;
		Height 4;
	}	
	
	// Manual collision must bounce off of buildings.
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (!passive)
		{
			if (!other || other is "DWMonster" || other is "DarwinianPlayer") return false;
			if (other is "DWBuilding")
			{
				if (Distance2D(other) <= other.Radius)
				{
					if (waiter > 0)	return false;
					bTHRUACTORS = true;
					waiter = 7;
					angle += 180;
					vel.x *= -1.0;
					vel.y *= -1.0;
					return true;
				}
				return false;
			}
			//return false;
		}
		return true;
	}
	
	override void BeginPlay()
	{
		ChangeStatNum(STAT_EXPLOSIVE);
		Super.BeginPlay();
	}
	
	override void PostBeginPlay()
	{
		DesignatedTeam = 255;
		A_PlaySound("Weapons/Grenade/Fire",6);
		
		Flare = Spawn("GrenadeBeepFlare",pos);
		Super.PostBeginPlay();
	}
	override void Tick()
	{
		if (globalfreeze || level.frozen)	return Super.Tick();
		timer++;
		if (abs(vel.z) == 0.0 && A_CheckFloor("Spawn"))	A_Stop();
		if (Flare)
		{
			Flare.SetOrigin(pos,true);
		}
		Super.Tick();
	}
	override void OnDestroy()
	{
		if (Flare) Flare.Destroy();
	}
	States
	{
	Spawn:
		MISL A 1
		{
			if (waiter > 0)
			{
				waiter--;
			}
			else if (waiter == 0)
			{
				waiter--;
				bTHRUACTORS = false;
			}
			
			A_CountDown();
		}
		Wait;
	Death:
		TNT1 A 35
		{
			ChangeTID(0);
			A_Stop();
			bNOINTERACTION = true;
			if (Flare) Flare.Destroy();
			A_Explode(150,170,1,0,64);
			A_SpawnItemEx("DarwiniaExplosion",flags: SXF_NOCHECKPOSITION);
			A_PlaySound("Weapons/Grenade/Explode",CHAN_AUTO);
		}
		Stop;
		/*
	Bounce.Actor:
		---- A 0
		{
			bTHRUACTORS = true;
			waiter = 3;
		}
		Goto Spawn;
		*/
	}
}

Class GrenadeBeepFlare : DWEntity
{
	int ticker;
	Default
	{
		+NOINTERACTION
		+THRUACTORS
		RenderStyle "Add";
	}
	
	override void PostBeginPlay()
	{
		ticker = random(0,34);
		Super.PostBeginPlay();
	}
	
	override void Tick()
	{
		if (globalfreeze || level.frozen)	return Super.Tick();
		ticker = (ticker + 1) % 35;
		
		if (ticker < 5)
		{
			if (!ticker)
			{
				A_PlaySound("Weapons/Grenade/Beep",CHAN_AUTO);
			}
			Sprite = GetSpriteIndex("M100");
			Frame = 5;
		}
		else
		{
			Sprite = GetSpriteIndex("TNT1");
			Frame = 0;
		}
		Super.Tick();
	}
}

Class DarwinianLaser : DWBase 
{
	//Actor exclusions[20];
	Actor plane;
	int timer;
	Array<Actor> exclusions;
	Default
	{
		Projectile;
		
		+ALLOWBOUNCEONACTORS
		+BOUNCEONFLOORS
		+BOUNCEONWALLS
		+FLATSPRITE
		+ROLLSPRITE
		//+ROLLCENTER
		+USEBOUNCESTATE
		+HITTRACER
		+BRIGHT
		+DOHARMSPECIES
		//Species "Darwinian";
		Speed 20;
		Damage 5;
		RenderStyle "Add";
		BounceFactor 1;
		
		XScale 0.15;
		//YScale 0.45;
		
		MaxStepHeight 0;
		SeeSound "Weapons/Laser/Fire";
		
		ReactionTime 20;
	}
	
	override void PostBeginPlay()
	{
		if (target)
		{
			master = target;
			DesignatedTeam = target.DesignatedTeam;
			TeamManager.SetTeam(self, DesignatedTeam);
			//Translation = target.Translation;
		}
				
		A_FaceMovementDirection();
		pitch += 90.0;
		Super.PostBeginPlay();
	}
	
	override int SpecialMissileHit (Actor victim)
	{
		if (!victim || victim.DesignatedTeam == DesignatedTeam || victim == target)	
			return 1;
		if (victim.health > 0)
		{
			if (target.DesignatedTeam != victim.DesignatedTeam)
			{
				//victim.DamageMobj(self, target, damage * random(1,8), "Laser");
				Name hit = victim.GetClassName();
				if (hit == 'DarwinianPlayerHitBox' || hit == 'Darwinian')
					A_PlaySound("Darwinian/LaserHitDarwinian", CHAN_AUTO);
				else if (hit == 'DWMonster')
					A_PlaySound("Weapons/Laser/Ent", CHAN_AUTO);
				else
					A_PlaySound("Weapons/Laser/Building", CHAN_AUTO);
				return -1;
			}
		}
		return 1;
	}
	
	States
	{
	Spawn:
		//M100 J 20;
		M100 C 1
		{
			A_Countdown();
		}
		Loop;
	Bounce.Floor:
	Bounce.Ceiling:
	Bounce.Wall:
		M100 C 1
		{
			A_FaceMovementDirection();
			pitch += 90.0;
			A_Countdown();
		}
		Goto Spawn;
	
	Death:
		TNT1 A 1
		{
			bUSEBOUNCESTATE = false;
			bTHRUACTORS = bNOINTERACTION = true;
		}
		Stop;
	}
}

Class DarwinianLaserPlane : Actor
{
	Default
	{
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOBLOCKMAP
		+THRUACTORS
		+FLATSPRITE
		+ROLLSPRITE
		//+ROLLCENTER
		+BRIGHT
		//RenderStyle "Add";
	}
	States
	{
	Spawn:
		M100 J 100;
		Stop;
	}
}

Class DarwinianLaserPlayer : DarwinianLaser	{}

Class DarwinianMuzzleFlash : Actor
{
	bool AdjustPitch;
	property AdjustPitch: AdjustPitch;
	Default
	{
		DarwinianMuzzleFlash.AdjustPitch true;
		+NOINTERACTION
		+NOTONAUTOMAP
		+NOBLOCKMAP
		+THRUACTORS
		+FLATSPRITE
		+ROLLSPRITE
		+BRIGHT
		RenderStyle "Add";
		Scale 0.5;
		Alpha 0.5;
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		
		if (!tid)
		{
			if (target && AdjustPitch) pitch = target.pitch;
			A_SpawnItemEx("DarwinianMuzzleFlash",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH,0,1);
		}
		else
		{
			ChangeTID(0);
			roll = pitch + 90;
			pitch = -90;
			angle -= 90;
		}
		
	}
	
	States
	{
	Spawn:
		M100 GG 1 NoDelay A_FadeIn(0.75);
		M100 "#" 1 A_FadeOut(0.25);
		Wait;
	}
}

Class DarwinianMuzzleFlashNoAdjust : DarwinianMuzzleFlash
{
	Default
	{
		DarwinianMuzzleFlash.AdjustPitch false;
	}
}