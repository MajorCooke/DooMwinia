Class TreePrecacher : Actor
{
	States
	{
	Spawn:
		M101 ABCDEFGHIJKLMNOPQRSTUVWXYZ 0;
		Stop;
	}
}

Class LaserTrunk : Actor
{
	//$Category DooMwinia
	int id;
	int spawncount;
	
	Default
	{
		+FLATSPRITE
		+ROLLSPRITE
		+NOINTERACTION
		+BRIGHT
		RenderStyle "Add";
	}
	override void BeginPlay()
	{
		id = tid;
		ChangeTID(0);
		Sprite = GetSpriteIndex("M101");
		Frame = 2;
		Super.BeginPlay();
	}
	
	override void PostBeginPlay()
	{
		pitch = -90;
		
		id = tid;
		ChangeTID(0);
		
		Sprite = GetSpriteIndex("M101");
		Frame = 2;
		SpawnLimbs();
		Super.PostBeginPlay();
	}
	
	void SpawnLimbs()
	{
		if (!id)
		{
			
			A_SpawnItemEx("LaserTrunk2",angle: 90,flags: SXF_NOCHECKPOSITION|SXF_ORIGINATOR|SXF_SETMASTER|SXF_TRANSFERSCALE|SXF_TRANSFERPITCH|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSPRITEFRAME);
			
			int mx = random(5,8);
			double ang = 360.0/mx;
			for (int i = 0; i < mx; i++)
			{
				A_SpawnItemEx("LaserBranchSpawner",frandom(-2.0,-3.0),0,frandom(60.0,120.0),
					angle: (ang*i)+(frandom(-ang,ang) * 0.5),
					flags: SXF_NOCHECKPOSITION|SXF_SETMASTER|SXF_ISTRACER|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERRENDERSTYLE);
				
				if (tracer)	tracer.pitch = frandom(-80.0,-10.0);
			}
		}
	}
	
	void RespawnLimbs()
	{
		if (!id)
		{
			A_RemoveChildren(true,RMVF_EVERYTHING);
			SpawnLimbs();
		}
	}
	
	override void OnDestroy()
	{
		A_RemoveChildren(true,RMVF_EVERYTHING);
		Super.OnDestroy();
	}
	
	States
	{
	Spawn:
		M101 C -1;
		Wait;
	ResetTree:
		//"####" "#" 1;
		"####" "#" 1 { if (!id) RespawnLimbs(); }
		Goto Spawn;
	}
}

Class LaserTrunk2 : Actor
{
	Default
	{
		+NOINTERACTION
		+NOBLOCKMAP
		+NOTONAUTOMAP
		+FLATSPRITE
		+BRIGHT
	}
	States
	{
	Spawn:
		"####" "#" -1;
		Stop;
	}
}


Class LaserBranchSpawner : Actor
{
	//const MaxLength = 256.0;
	//const Subt = MaxLength / 7.0;
	Default
	{
		+NOINTERACTION
		RenderStyle "None";
		XScale 0.5;
	}
	
	override void PostBeginPlay()
	{
		double Subt = 12.0;
		double MaxLength = 128.0;
		int MaxSpawn = (tid) ? random(1,3) : random(2,5);
		Scale.Y = frandom(0.2,0.4);
		pitch = frandom(-1.0, -70.0);
		
		for (int i = 0; i < MaxSpawn; i++)
		{
			double ml = MaxLength * Scale.Y;
			double fx =  (cos(pitch) * (ml - (Subt * (Scale.Y))));
			double fz = (-sin(pitch) * (ml - (Subt * (Scale.Y))));
			double nx = (i == 0) ? 0 : cos(pitch) * -2.0;
			double nz = (i == 0) ? 0 : -sin(pitch) * -2.0;
			A_SpawnItemEx("LaserBranch",nx, 0, nz,
				flags: SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERSCALE|SXF_TRANSFERPITCH|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERRENDERSTYLE);
			
			// Don't spawn extra limbs on the first one, that just looks fucking morbid.
			if (i) A_SpawnItemEx("LaserBranchSpawner",flags: SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERSCALE|SXF_TRANSFERPITCH|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERRENDERSTYLE,
				failchance: 128 + tid * 35, tid: tid + 1);
			
			A_Warp(DefPtr, fx, 0, fz, 0, WARPF_NOCHECKPOSITION);
			//SetOrigin(Vec3Angle(fx, angle, fz),false);
			double MaxAP = 30.0;
			pitch += frandom(-MaxAP, MaxAP);
			angle += frandom(-MaxAP, MaxAP);
			Scale.Y += frandom(0.01, -0.025);
		}
		
		Vector3 oldpos = pos;
		MaxSpawn = random(1,3);
		Subt *= 1.25;
		Scale.X *= 0.75;
		double oldxs = Scale.X;
		double MaxAP = 50.0;
		int MaxSpawn2 = random(3,12);
		int dir = randompick(-1,1);
		
		Scale.Y = frandom(0.1, 0.2);
		for (int j = 0; j < MaxSpawn2; j++)
		{
			double ml = MaxLength * Scale.Y;
			A_SpawnItemEx("LaserBranch",cos(pitch) * -2.0,0,-sin(pitch) * -2.0,
				flags: SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERSCALE|SXF_TRANSFERPITCH|SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERRENDERSTYLE);
			
			double op = pitch;
			double oa = angle;
			
			A_Warp(DefPtr,cos(pitch) * 75.0 * Scale.Y,0,-sin(pitch) * 75.0 * Scale.Y,WARPF_NOCHECKPOSITION);
			
			int rng = random(1,4);
			for (int t = 0; t < rng; t++)
			{
				A_SpawnItemEx("LaserLeaf",
					flags: SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERPITCH|SXF_TRANSFERRENDERSTYLE);
				angle += frandom(MaxAP / 4.0, MaxAP) * dir;
				pitch += frandom(MaxAP / 4.0, MaxAP) * randompick(-1,1);
				
				if (t == rng - 1)
				{	angle = oa; pitch = op;	}
			}
			//A_Warp(DefPtr, fx, 0, fz, 0, WARPF_NOCHECKPOSITION);
			SetOrigin(oldpos,false);
			angle += frandom(MaxAP / 4.0, MaxAP) * dir;
			pitch += frandom(MaxAP / 4.0, MaxAP) * randompick(-1,1);
			//pitch += frandom(-MaxAP, MaxAP);
			//angle += frandom(-MaxAP, MaxAP);
			Scale.X += frandom(0.01, -0.025);
			Scale.Y += frandom(0.01, -0.025);
		}
		
		Destroy();
	}
}


Class LaserBranch : Actor
{
	int id;
	
	override void PostBeginPlay()
	{
		id = tid;
		ChangeTID(0);
		
		if (!id)
		{
			A_SpawnItemEx("LaserBranch",flags: SXF_TRANSFERRENDERSTYLE|SXF_NOCHECKPOSITION|SXF_TRANSFERPOINTERS|SXF_TRANSFERSCALE|SXF_TRANSFERPITCH|SXF_TRANSFERSPRITEFRAME,tid: 1);
		}
		else
		{
			roll = pitch + 90;
			pitch = -90;
			angle -= 90;
		}
		Super.PostBeginPlay();
	}
	
	Default
	{
		+NOTONAUTOMAP
		+FLATSPRITE
		+NOINTERACTION
		//+ROLLCENTER
		+ROLLSPRITE
		+BRIGHT
		Scale 0.5;
		RenderStyle "Add";
	}
	States
	{
	Spawn:
		"####" "#" -1;
		Stop;
	}
}

Class LaserLeaf : Actor
{
	int turned;
	property Turned: turned;
	Default
	{
		+NOINTERACTION
		+NOBLOCKMAP
		+THRUACTORS
		+NOTONAUTOMAP
		+FLATSPRITE
		YScale 0.20;
		XScale 0.7;
		RenderStyle "Add";
		LaserLeaf.Turned 0;
	}
	
	override void PostBeginPlay()
	{
		if (!turned)
		{
			Scale.X = frandom(0.7, 0.9);
			Scale.Y = frandom(0.05, 0.15);
			A_SpawnItemEx("LaserLeaf2",flags: SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH|SXF_TRANSFERPOINTERS|SXF_TRANSFERSCALE);
		}
		else
		{
			roll = pitch + 90;
			pitch = -90;
			angle -= 90;
		}
		Super.PostBeginPlay();
	}
	
	States
	{
	Spawn:
		M101 G -1;
		Stop;
	}
}

Class LaserLeaf2 : LaserLeaf
{	Default	{	LaserLeaf.Turned 1;	}	}

// Used for reinitializing trees, debug purposes only.

Class TreeRespawner : Actor
{
	Default
	{
		+NOSECTOR
		+NOBLOCKMAP
		+NOINTERACTION
		+THRUACTORS
	}
	override void PostBeginPlay()
	{
		ThinkerIterator TreeFinder = ThinkerIterator.Create("LaserTrunk");
		Actor mo;
		while (mo = Actor(TreeFinder.Next(true)))
		{
			mo.SetState(mo.FindState("ResetTree"));
			continue;
		}
		Destroy();
	}
}